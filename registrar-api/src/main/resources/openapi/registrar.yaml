openapi: 3.0.2
info:
  title: registrar
  version: 1.0.0
servers:
  - url: http://localhost:8080/registrar/api/v1

paths:
  /users/filter:
    get:
      operationId: filter
      parameters:
        - $ref: '#/components/parameters/Status'
      responses:
        "200":
          $ref: '#/components/responses/UsersFilterResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /users:
    post:
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/UsersCreateRequest'
      responses:
        "201":
          $ref: '#/components/responses/CreatedResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

components:
  parameters:
    Status:
      name: status
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/UsersFilterStatus'
  requestBodies:
    UsersCreateRequest:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/UsersCreateRequestData'
  responses:
    UsersFilterResponse:
      description: Успех
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/UsersFilterResponseData'
    CreatedResponse:
      description: Успех
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/CreatedResponseData'
    ErrorResponse:
      description: Ошибка
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorResponseData'
  schemas:
    UsersCreateRequestData:
      type: object
      required:
        - firstName
        - lastName
        - passport
        - birthDate
        - passportExpiryDate
        - email
        - password
        - request
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        passport:
          type: string
        birthDate:
          type: string
          format: date
        passportExpiryDate:
          type: string
          format: date
        citizenship:
          type: string
        email:
          type: string
        password:
          type: string
        request:
          $ref: '#/components/schemas/VisaRequest'
    VisaRequest:
      type: object
      required:
        - cities
        - from
        - to
      properties:
        from:
          type: string
          format: date
        to:
          type: string
          format: date
        cities:
          type: array
          uniqueItems: true
          items:
            type: string
    VisaResponse:
      required:
        - status
      properties:
        status:
          type: integer
        body:
          type: string
    UsersFilterStatus:
      type: string
      enum: [ new, rejected, completed, all ]
      default: all
    UsersFilterResponseData:
      type: array
      items:
        $ref: '#/components/schemas/FilteredUser'
    FilteredUser:
      type: object
      required:
        - id
        - firstName
        - lastName
        - passport
        - birthDate
        - passportExpiryDate
        - email
        - createdAt
        - request
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        passport:
          type: string
        birthDate:
          type: string
          format: date
        passportExpiryDate:
          type: string
          format: date
        citizenship:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date
        completedAt:
          type: string
          format: date
        rejectedAt:
          type: string
          format: date
        request:
          $ref: '#/components/schemas/VisaRequest'
        response:
          $ref: '#/components/schemas/VisaResponse'
    CreatedResponseData:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    ErrorResponseData:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        originalCode:
          type: string
        originalMessage:
          type: string